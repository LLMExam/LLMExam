# -*- coding: utf-8 -*-
"""ques_to_db

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/ques-to-db-d894693e-af0b-4279-af51-3024d94d48ca.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250207/auto/storage/goog4_request%26X-Goog-Date%3D20250207T115347Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D722bea6a5328c03e31002ed2107829df08275d21a52289d9ef9aa7957f211042bba37c6f9a0abf1d0d13c06b07276a57ae07afad45e7e26a2ea5c4388a2c82e841632482bfe1c258ed41c2b5b15da832d96933f407b60ccdbbb8d2a921100f5214ff47e08424a593f79f4c74fe35ee30b7837d942742b35538629292a6d01ddbf381c9d7ab7aa70f482bda56d045aaf778595aa2fd0310f92c3b26d946e50b717da5c75be72afe97c5b629a38ea1f1f65f59a7d72c3f76920517b0daa2877b1606f4b020ee7d95d972557afb2ad58bb4cd3569937136a1944aedc4b9208c011e6d2b79dddddb191e37e8d86d10d1191208a87bd80a3f47d4dac3e8123c5dc85d
"""

!pip install --quiet mistralai weaviate-client 2>/dev/null

import os
import re

import weaviate
from weaviate.classes.init import Auth
from weaviate.classes.config import Property, DataType

from mistralai import Mistral

api_key = "HCOHSJGVjzxKYjhBjO4u8rGmZFKObnLf"
embedding_model = "mistral-embed"

mistral_client = Mistral(api_key=api_key)

def get_embeddings(questions):
    response = mistral_client.embeddings.create(
        model=embedding_model,
        inputs=questions
    )
    return response.data

url = "https://pgwkmycmtbor78al14g5ya.c0.asia-southeast1.gcp.weaviate.cloud"
key = "1TZymK1LSn6FnBTnvou7T5ghjJAXx2EItPgJ"

weaviate_client = weaviate.connect_to_weaviate_cloud(
    cluster_url=url,
    auth_credentials=Auth.api_key(key)
)

if weaviate_client.is_ready():
    print("✅ Successfully connected to Weaviate Cloud!")
else:
    print("❌ Failed to connect. Check your URL and API Key.")

collection_name = "Llmexam"

if collection_name not in weaviate_client.collections.list_all():
    weaviate_client.collections.create(
        name=collection_name,
        properties=[
            Property(name="question_text", data_type=DataType.TEXT),
            Property(name="question_embedding", data_type=DataType.NUMBER_ARRAY),
        ],
        vectorizer_config=None
    )
    print(f"✅ Collection '{collection_name}' created.")
else:
    print(f"⚡ Collection '{collection_name}' already exists.")

def store_questions(questions, embeddings):
    for question, emb in zip(questions, embeddings):
        vector = emb.embedding if hasattr(emb, "embedding") else emb
        llmexam.data.insert(
            properties={
                "question_text": question,
                "question_embedding": vector
            },
            vector=vector
        )
    print(f"✅ {len(questions)} questions stored successfully!")

llmexam = weaviate_client.collections.get("llmexam")

questions = [
    "What is the capital of France?",
    "Who wrote 'To Kill a Mockingbird'?",
    "What is the square root of 64?",
    "What is the chemical symbol for water?",
    "Who painted the Mona Lisa?"
]

embeddings = get_embeddings(questions)
store_questions(questions, embeddings)

print("✅ Successfully stored questions in Weaviate.")